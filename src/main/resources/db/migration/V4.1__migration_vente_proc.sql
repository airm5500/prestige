DELIMITER @@
DROP PROCEDURE IF EXISTS proc_updatemvtrans @@
CREATE PROCEDURE proc_updatemvtrans()

BEGIN 

DECLARE dtUPDATED DATETIME;
DECLARE lgUSERID VARCHAR(40);
DECLARE VENDEUR VARCHAR(40);
DECLARE strREF VARCHAR(40);
DECLARE lgTYPEVENTEID VARCHAR(40);
DECLARE lgTYPEREGLEMENTID VARCHAR(40);
DECLARE typeMvt VARCHAR(10);
DECLARE lgPREENREGISTREMENTID VARCHAR(40);
DECLARE EMPLACEMENT VARCHAR(40);
DECLARE intPRICE NUMERIC(10);
DECLARE MONTANTPAYE NUMERIC(10);
DECLARE MONTANTRECU NUMERIC(10);
DECLARE MONTANTCREDIT NUMERIC(10);
DECLARE intPRICEREMISE NUMERIC(10);
DECLARE intCUSTPART NUMERIC(10);
DECLARE categorie INT(1) DEFAULT 1;
DECLARE typetransac INT(1);
DECLARE done INT DEFAULT 0;
DECLARE curbl CURSOR FOR 
SELECT distinct p.lg_PREENREGISTREMENT_ID,p.int_PRICE,p.int_PRICE_REMISE,p.int_CUST_PART,p.lg_TYPE_VENTE_ID,p.lg_USER_ID,p.lg_USER_VENDEUR_ID
,p.dt_UPDATED,p.str_REF,c.lg_TYPE_REGLEMENT_ID,c.int_AMOUNT_CREDIT,c.int_AMOUNT_RECU,e.lg_EMPLACEMENT_ID
 FROM t_preenregistrement p,t_cash_transaction c,t_user u,t_emplacement e WHERE p.str_STATUT ='is_Closed' AND p.b_IS_CANCEL=FALSE AND p.int_PRICE >0 AND c.int_AMOUNT >=0
 AND c.str_RESSOURCE_REF=p.lg_PREENREGISTREMENT_ID AND c.lg_USER_ID=u.lg_USER_ID AND p.lg_USER_ID=u.lg_USER_ID AND u.lg_EMPLACEMENT_ID=e.lg_EMPLACEMENT_ID AND p.lg_TYPE_VENTE_ID <>'5';
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done=1;
OPEN curbl;
bl_loop:LOOP
FETCH curbl INTO lgPREENREGISTREMENTID,intPRICE,intPRICEREMISE,intCUSTPART,lgTYPEVENTEID,lgUSERID,VENDEUR,dtUPDATED,strREF,lgTYPEREGLEMENTID,MONTANTPAYE,MONTANTRECU,EMPLACEMENT;
IF done=1 THEN 
 LEAVE bl_loop;
 END IF;
IF lgTYPEVENTEID ='1' || lgTYPEVENTEID='4' THEN 
SET typetransac=0;
SET typeMvt='9';
SET MONTANTCREDIT=0;
ELSE
SET typetransac=1;
SET typeMvt='8';
SET MONTANTCREDIT=intPRICE-(intCUSTPART-intPRICEREMISE);
IF lgTYPEVENTEID='3' THEN
SET MONTANTPAYE=0;
SET MONTANTRECU=0;
SET MONTANTCREDIT=intPRICE-intPRICEREMISE;
END IF;
END IF;

INSERT IGNORE INTO mvttransaction (uuid, `createdAt`, `MONTANT`, `MONTANTCREDIT`, `MONTANTREGLE`, `MONTANTRESTANT`, mvtdate, caisse, `typeTransaction`, `grossisteId`, `lg_EMPLACEMENT_ID`, `typeReglementId`, `typeMvtCaisseId`, `lg_USER_ID`, `montantRemise`, `montantNet`, `MONTANTVERSE`, pkey, categorie, `avoidAmount`, `checked`, `montantPaye`, `montantTva`, marge, reference, organisme) 
	VALUES (UUID(), dtUPDATED, intPRICE, MONTANTCREDIT, MONTANTPAYE, 0, dtUPDATED, lgUSERID, typetransac, NULL, EMPLACEMENT, lgTYPEREGLEMENTID, typeMvt, lgUSERID, intPRICEREMISE, intPRICE-intPRICEREMISE, MONTANTRECU, lgPREENREGISTREMENTID, 1, 0, true, MONTANTPAYE, 0, 0, strREF, NULL);

END LOOP bl_loop;
 CLOSE curbl;

END @@ 
DELIMITER ; 
